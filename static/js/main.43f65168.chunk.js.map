{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","score","highscore","App","state","cards","gameOver","setState","console","log","this","forEach","card","count","alert","find","x","i","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4jEAYeA,G,WARF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC1D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCDxBC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCS1CC,G,MATA,SAAAX,GAAK,OAClB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,SAAf,iBACA,yBAAKA,UAAU,UAAf,UACUD,EAAMY,MADhB,eACmCZ,EAAMa,c,OC8D1BC,E,4MA1DbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,UAAW,G,EAIbI,SAAW,WAaT,OAZI,EAAKF,MAAMH,MAAQ,EAAKG,MAAMF,WAChC,EAAKK,SAAS,CAACL,UAAW,EAAKE,MAAMH,QAAQ,WAC3CO,QAAQC,IAAIC,KAAKN,MAAMF,cAI3B,EAAKE,MAAMC,MAAMM,SAAQ,SAAAC,GACvBA,EAAKC,MAAQ,KAGfC,MAAM,oBAAD,OAAqB,EAAKV,MAAMH,QACrC,EAAKM,SAAS,CAACN,MAAO,KACf,G,EAGTT,WAAa,SAAAC,GACZ,EAAKW,MAAMC,MAAMU,MAAK,SAACC,EAAGC,GACvB,GAAID,EAAEvB,KAAOA,EAAI,CACf,GAAsB,IAAnBY,EAAMY,GAAGJ,MAOV,OANAR,EAAMY,GAAGJ,MAAQR,EAAMY,GAAGJ,MAAQ,EAClC,EAAKN,SAAS,CAACN,MAAQ,EAAKG,MAAMH,MAAQ,IAAI,WAC5CO,QAAQC,IAAIC,KAAKN,MAAMH,UAGzB,EAAKG,MAAMC,MAAMa,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAEP,EAAKd,gB,uDAMH,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQL,MAAOS,KAAKN,MAAMH,MAAOC,UAAWQ,KAAKN,MAAMF,WAAvD,uBACCQ,KAAKN,MAAMC,MAAMgB,KAAI,SAAAT,GAAI,OACxB,kBAAC,EAAD,CACEpB,WAAY,EAAKA,WACjBC,GAAImB,EAAKnB,GACT6B,IAAKV,EAAKnB,GACVI,MAAOe,EAAKf,gB,GArDN0B,aCGFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.43f65168.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\n//Runs the clickCount function each time a card is clicked\nconst Card = props => (\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Card;","  \nimport React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Header.css\";\n\n//Holds the score and changes as the scores are clicked using props. \nconst Header = props => (\n  <div className=\"header\">\n    <div className=\"title\">Nature's Game</div>\n    <div className=\"scores\">\n      Score: {props.score} Highscore: {props.highscore}\n    </div>\n  </div>\n);\n\nexport default Header;","//Defines routes to import the files to use to run the app.\nimport './App.css';\nimport React, { Component } from \"react\"\nimport Card from \"./components/Card\"\nimport Wrapper from \"./components/Wrapper\"\nimport Header from \"./components/Header\"\nimport cards from \"./cards.json\"\nimport \"./App.css\"\n    \n    class App extends Component {\n    \n      // Setting this.state.cards to the cards json array\n      state = {\n        cards,\n        score: 0,\n        highscore: 0\n      };\n    \n      // If the user clicks on the same card it alerts that the Game is over. If the current score is more than than the high score it becomes the new highscore and the game is over. \n      gameOver = () => {\n        if (this.state.score > this.state.highscore) {\n          this.setState({highscore: this.state.score}, function() {\n            console.log(this.state.highscore);\n          });\n        }\n        //Returns each card count to 0 when the game is over.\n        this.state.cards.forEach(card => {\n          card.count = 0;\n        });\n        //Alerts game over and resets the score to zero\n        alert(`Game Over score: ${this.state.score}`);\n        this.setState({score: 0});\n        return true;\n      }\n    //This function counts the score. It finds the card by id and if the id has not been previously clicked it increments the score by 1. Keep doing this until the game is over. \n      clickCount = id => {\n       this.state.cards.find((x, i) => {\n          if (x.id === id) {\n            if(cards[i].count === 0){\n              cards[i].count = cards[i].count + 1;\n              this.setState({score : this.state.score + 1}, function(){\n                console.log(this.state.score);\n              });\n              //sorts cards in Random order until game over\n              this.state.cards.sort(() => Math.random() - 0.5)\n              return true; \n            } else {\n              this.gameOver();\n            }\n          }\n        });\n      }\n      //This stores the header information. It maps over this.state.cards and render a cardCard component for each card object. This gives each card and id, image, and clickcount. \n      render() {\n        return (\n          <Wrapper>\n            <Header score={this.state.score} highscore={this.state.highscore}>Nature's Click Game</Header>\n            {this.state.cards.map(card => (\n              <Card\n                clickCount={this.clickCount}\n                id={card.id}\n                key={card.id}\n                image={card.image}\n              />\n            ))}\n          </Wrapper>\n        );\n      }\n    }\n    \n    export default App;\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}